{"version":3,"sources":["uform.js","uform_without_templates.js","templates.js"],"names":["uf","angular","module","config","$provide","datepickerConfig","showWeeks","decorator","$delegate","ngModel","controller","scope","element","attrs","$injector","$interpolate","get","$set","name","validator","invoke","this","$scope","$element","$attrs","forEach","ng-form","form","directive","ngForm","$compile","restrict","field","$parent","$eval","require","controllerAs","link","extend","$proxy","html","compileField","contents","$rootScope","templateUrl","transclude","ufield","fields","create","option","result","elem","attr","group","uform","$form","push","template","modelCtrl","capitalize","inputValue","undefined","capitalized","toUpperCase","$setViewValue","$render","$parsers","$parse","$watch","res","upFieldHide","value","css","ele","model","$viewChangeListeners","$viewValue","length","substring","upText","upDate","upTime","upDatetime","upPassword","upCheckbox","upRadio","upSubmit","upSelect","upTextarea","tpl","direct","uFormUtil","getTemplate","then","textTpl","replace","toAttrs","vm","customs","provider","_tp","_vo","_pt","_setOpts","opts","_opts","type","isDefined","validateOn","pattern","useType","val","useValidateOn","usePattern","$get","filter","items","reverse","filtered","item","sort","a","b","factory","$templateCache","$q","$http","dialogs","obj","str","o","next","tpath","when","cache","put","data","response","error","fn","hasFormInvalidMessage","formElement","attributes","setupWatches","formInvalidMessage","i","setupWatch","elementToWatch","on","updateValidationMessage","updateValidationClass","watch","required","scopeForm","submitted","checkElementValidity","getDirtyValue","getValidValue","isDirtyElement","$pristine","watches","$dirty","$valid","isElementValid","$setValidity","defaultRequiredMessage","defaultInvalidMessage","scopeElementModel","validationMessageElement","isValidationMessagePresent","remove","$error","after","generateErrorMessage","message","messageText","elementSiblings","parent","children","hasClass","formField","removeClass","parentNode","$invalid","addClass","DOMForm","form_name","Object","keys","event","preventDefault","$apply","reset","$setPristine","run"],"mappings":";;;;;;;CASC,WACD,YCVA,IAAAA,GAAAC,QAAAC,OAAA,YAAA,gBAEAF,GAAAG,QAAA,WAAA,mBAAA,SAAAC,EAAAC,GACAA,EAAAC,WAAA,EACAF,EAAAG,UAAA,oBAAA,YAAA,SAAAC,GACA,GAAAC,GAAAD,EAAA,GAAAE,EAAAD,EAAAC,UAWA,OAVAD,GAAAC,YAAA,SAAA,WAAA,SAAA,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,EAAAE,IAAA,eACAH,GAAAI,KAAA,OAAAF,EAAAF,EAAAK,MAAA,IAAAP,IACAE,EAAAI,KAAA,YAAAF,EAAAF,EAAAM,WAAA,IAAAR,IACAG,EAAAM,OAAAV,EAAAW,MACAC,OAAAX,EACAY,SAAAX,EACAY,OAAAX,MAGAL,KAGAP,QAAAwB,SAAAC,UAAA,kBAAAC,KAAA,iBAAA,SAAAC,GACAxB,EAAAG,UAAAqB,GAAA,YAAA,SAAApB,GACA,GAAAmB,GAAAnB,EAAA,GAAAE,EAAAiB,EAAAjB,UAWA,OAVAiB,GAAAjB,YAAA,SAAA,WAAA,SAAA,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,EAAAE,IAAA,eACAH,GAAAI,KAAA,OAAAF,EAAAF,EAAAK,MAAAL,EAAAgB,QAAA,IAAAlB,IACAE,EAAAI,KAAA,oBAAA,IACAH,EAAAM,OAAAV,EAAAW,MACAC,OAAAX,EACAY,SAAAX,EACAY,OAAAX,MAGAL,UAQAR,EAAA4B,UAAA,gBAAA,WAAA,SAAAE,GACA,OACAC,SAAA,IACArB,YAAA,SAAA,SAAAY,GAEAD,KAAAW,MAAAV,EAAAW,QAAAC,MAAA,SACAb,KAAAM,UAEAQ,QAAA,UACAC,aAAA,SACAzB,SACA0B,KAAA,SAAA1B,EAAAC,EAAAC,EAAAc,GACA1B,QAAAqC,OAAA3B,EAAA4B,OAAAZ,KAAAA,GACAf,EAAA4B,KAAA,QAAA7B,EAAAsB,QAAAC,MAAArB,EAAA4B,cAAA,OACAX,EAAAlB,EAAA8B,YAAA/B,QAKAX,EAAA4B,UAAA,SAAA,aAAA,SAAAe,GACA,OACAC,YAAA,YACAC,YAAA,EACAd,SAAA,KACArB,YAAA,SAAA,SAAA,aAAA,SAAA,SAAAY,EAAAE,EAAAmB,EAAAG,GACA,GAAAb,GAAAX,EAAAW,OACAZ,MAAA0B,OAAAd,EAAAC,MAAAV,EAAAuB,QACA9C,QAAAwB,QAAAJ,KAAA0B,OAAA,SAAAf,GACA/B,QAAAqC,OAAAN,EAAAc,EAAAE,OAAAhB,MAEAX,KAAA4B,OAAAhB,EAAAC,MAAAV,EAAAyB,QACA5B,KAAA6B,OAAAjB,EAAAC,MAAAV,EAAA0B,SAAAjB,EAAAC,MAAAV,EAAA0B,OAAA,SAEAvC,SACAyB,aAAA,QACAD,QAAA,eACAE,KAAA,SAAA1B,EAAAwC,EAAAC,EAAAC,GACA1C,EAAA2C,MAAAC,MAAA5C,EAAAsB,QAAAC,MAAAkB,EAAAlC,MACAmC,GAAAA,EAAAN,QAAAM,EAAAN,OAAAS,KAAA7C,EAAA2C,MAAAP,QACAM,GAAAA,EAAAH,QAAAG,EAAAH,OAAAM,KAAA7C,EAAA2C,MAAAJ,aAMAlD,EAAA4B,UAAA,aAAA,WACA,OACAlB,YAAA,SAAA,SAAA,SAAAY,EAAAE,GACAH,KAAA0B,OAAAzB,EAAAW,QAAAC,MAAAV,EAAAuB,SAAAzB,EAAAW,QAAAC,MAAAV,EAAAuB,OAAA,OACA1B,KAAA6B,OAAA5B,EAAAW,QAAAC,MAAAV,EAAA0B,SAAA5B,EAAAW,QAAAC,MAAAV,EAAA0B,OAAA,SAEAvC,SACA8C,SAAA,4BACArB,aAAA,aACAS,YAAA,KAIA7C,EACA4B,UAAA,aAAA,WACA,OACAO,QAAA,UACAE,KAAA,SAAA1B,EAAAC,EAAAC,EAAA6C,GACA,GAAAC,GAAA,SAAAC,GACAC,QAAAD,IAAAA,EAAA,GACA,IAAAE,GAAAF,EAAAG,aAKA,OAJAD,KAAAF,IACAF,EAAAM,cAAAF,GACAJ,EAAAO,WAEAH,EAEAJ,GAAAQ,SAAAV,KAAAG,GACAA,EAAAhD,EAAAE,EAAAJ,cAKAT,EAAA4B,UAAA,eAAA,SAAA,SAAAuC,GACA,OACAhC,QAAA,UACAJ,SAAA,IACAM,KAAA,SAAA1B,EAAAC,EAAAwC,EAAAzB,GAEA,QAAAhB,GAAAqB,OACArB,EAAAyD,OAAA,WACA,GAAAC,GAAAF,EAAAf,EAAAkB,aAAA3C,EAAAuB,OACA,OAAAmB,IACA,SAAAE,GAEA3D,EAAA4D,IAAA,UAAAD,EAAA,OAAA,IAEAA,SAAA5C,GAAAuB,OAAAvC,EAAAqB,MAAAd,aAOAlB,EAAA4B,UAAA,eAAA,SAAA,SAAAuC,GACA,OACAhC,QAAA,UACAJ,SAAA,IACAM,KAAA,SAAA1B,EAAA8D,EAAArB,EAAAsB,GACAA,EAAAC,qBAAAnB,KAAA,WACA,GAAAe,GAAAG,EAAAE,UACAL,GAAAM,OAAAzB,EAAA,YAAAsB,EAAAV,cAAAO,EAAAO,UAAA,EAAA1B,EAAA,cAAA,KACAsB,EAAAT,iBAMAhE,QAAAwB,SACAsD,OAAA,UACAC,OAAA,UACAC,OAAA,UACAC,WAAA,cACAC,WAAA,cACAC,WAAA,cACAC,QAAA,WACAC,SAAA,YACAC,SAAA,YACAC,WAAA,eACA,SAAAC,EAAAC,GACA1F,EAAA4B,UAAA8D,GAAA,WAAA,YAAA,SAAA5D,EAAA6D,GACA,OACA5D,SAAA,KACArB,YAAA,SAAA,SAAAY,GACArB,QAAAqC,OAAAjB,KAAAC,EAAAiB,UAEAH,aAAA,KACAC,KAAA,SAAA1B,EAAAwC,EAAAC,GACAuC,EAAAC,YAAAH,GAAAI,KAAA,SAAAC,GACA3C,EAAAX,KAAAsD,EAAAC,QAAA,YAAAJ,EAAAK,QAAArF,EAAAsF,GAAAjE,MAAAkE,SAAA,aACApE,EAAAqB,EAAAT,YAAA/B,YAUAX,EAAAmG,SAAA,UAAA,WACA,GAAAC,GAAA,UACAC,EAAA,QACAC,EAAA,OACAC,EAAA,SAAAC,GACA,GAAAC,KAKA,OAJAD,GAAAA,MACAC,EAAAC,KAAAzG,QAAA0G,UAAAH,EAAAE,MAAAF,EAAAE,KAAAN,EACAK,EAAAG,YAAA3G,QAAA0G,UAAAH,EAAAI,aAAA,UAAAJ,EAAAI,YAAA,SAAAJ,EAAAI,WAAAP,EAAAG,EAAAI,WACAH,EAAAI,QAAA5G,QAAA0G,UAAAH,EAAAK,SAAAL,EAAAK,QAAAP,EACAG,EAEApF,MAAAyF,QAAA,SAAAC,GACA9G,QAAA0G,UAAAI,KACAX,EAAAW,IAEA1F,KAAA2F,cAAA,SAAAD,GACA9G,QAAA0G,UAAAI,KACAV,EAAAU,IAEA1F,KAAA4F,WAAA,SAAAF,GACA9G,QAAA0G,UAAAI,KACAT,EAAAS,IAEA1F,KAAA6F,MAAA,WACA,OACAlE,OAAA,SAAAwD,GAEA,MADAA,GAAAD,EAAAC,UAQAxG,EAAAmH,OAAA,YAAA,WACA,MAAA,UAAAC,EAAApF,EAAAqF,GACA,GAAAC,KASA,OARArH,SAAAwB,QAAA2F,EAAA,SAAAG,EAAArG,GACAqG,EAAA,KAAArG,EACAoG,EAAA9D,KAAA+D,KAEAD,EAAAE,KAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAzF,GAAA0F,EAAA1F,GAAA,OAEAqF,GAAAC,EAAAD,UACAC,KAIAtH,EAAA2H,QAAA,aAAA,iBAAA,KAAA,QAAA,UAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAKA,QAAA/B,GAAAgC,GACA,IAAAA,EACA,MAAA,EAEA,IAAAC,GAAA,EACA,KAAA,GAAAC,KAAAF,GAAA,CACA,GAAAG,EAIAA,GAHAH,EAAAE,GAGAA,EAAA,IAAAF,EAAAE,GAFAA,EAIAD,GAAAE,EAAA,IAEA,MAAAF,GAEA,QAAArC,GAAA1E,GACA,GAAAkH,GAAAlH,EAAA,QACAuE,EAAAmC,EAAA5G,IAAAoH,EACA,OAAA3C,GACAoC,EAAAQ,KAAA5C,GAEAqC,EAAA9G,IAAAoH,GAAAE,OAAA,IAAAzC,KAAA,SAAArD,GAEA,MADAoF,GAAAW,IAAAH,EAAA5F,GACAA,EAAAgG,MACA,SAAAC,GACAV,EAAAW,MAAA,QAAA,MAAAN,EAAA,YA9BA,OACApC,QAAAA,EACAJ,YAAAA,MAkCA5F,EAAA4B,UAAA,oBAAA,YAAA,SACA,SAAAd,EAAAqD,GACA,OACApC,SAAA,IACAM,KAAA,SAAA1B,EAAAC,EAAAC,EAAA8H,GA+CA,QAAAC,GAAAC,GACA,SAAAA,GAAA,mBAAAA,GAAAC,aACAhI,EAAAE,IAAA6H,EAAAC,WAAA,mBAAAvE,OAMA,QAAAwE,GAAAF,GAEA,IAAA,GADAG,GAAAJ,EAAAC,GACAI,EAAA,EAAAA,EAAAJ,EAAAhE,OAAAoE,IAEAA,IAAAJ,IACAK,EAAAL,EAAAI,GAAAD,GAKA,QAAAE,GAAAC,EAAAH,GAEA,eAAAG,GAAAL,YAAA,SAAAK,EAAAL,WAAA,eAAAvE,OACAtE,QAAAW,QAAAuI,GAAAC,GAAA,OAAA,WACAC,EAAAF,EAAAH,GACAM,EAAAH,IAGA,IAAAI,GAAA5I,EAAAyD,OAAA,WACA,MAAA+E,GAAA5E,MAAA4E,EAAAK,SAAAC,EAAAC,UAAAC,EAAAR,GAAAS,EAAAH,EAAAN,EAAAjI,OAAA2I,EAAAJ,EAAAN,EAAAjI,QAEA,WAEA,GAAAuI,EAAAC,UACAL,EAAAF,EAAAH,GACAM,EAAAH,OAEA,CAEA,GAAAW,GAAA,eAAAX,GAAAL,YAAA,UAAAK,EAAAL,WAAA,eAAAvE,KAEAuF,IACAT,EAAAF,EAAAH,GACAM,EAAAH,IAGAM,EAAAN,EAAAjI,OAAAuI,EAAAN,EAAAjI,MAAA6I,YACAV,EAAAF,EAAAH,GACAM,EAAAH,MAMAa,GAAAxG,KAAA+F,GAGA,QAAAK,GAAAhJ,GACA,GAAAA,GACA,UAAAA,GACA,MAAAA,GAAAqJ,OAIA,QAAAJ,GAAAjJ,GACA,GAAAA,GACA,UAAAA,GACA,MAAAA,GAAAsJ,OAIA,QAAAP,GAAA/I,GAEA,GAAA,aAAAA,GAAAkI,WAAA,CAEA,GAAAqB,EAQA,OAHAA,IAJAvJ,EAAAkI,WAAA3H,WAAA,KAAAP,EAAAkI,WAAA3H,UAAAoD,OAIA,GAAA5D,EAAAuB,MAAAtB,EAAAkI,WAAA3H,UAAAoD,QAGAkF,EAAA7I,EAAAM,QACAuI,EAAA7I,EAAAM,MAAAkJ,aAAA,mBAAAD,GACAA,IAWA,QAAAd,GAAAzI,EAAAoI,GAEA,GAAAqB,GAAA,WACA,MAAA,wCAEAC,EAAA,WACA,MAAA,sCAKA,IAAA1J,EAAAM,OAAAuI,GAAA,CAGA,GAAAc,GAAAd,EAAA7I,EAAAM,MAGAsJ,EAAAC,EAAA7J,EACA4J,IACAA,EAAAE,UAGAH,EAAAN,QAAAtJ,EAAAC,EAAAe,KAAAT,OAAAP,EAAAC,EAAAe,KAAAT,MAAAwI,aAEAa,EAAAI,OAAAnB,SAEA,oBAAA5I,GAAAkI,WACA7I,QAAAW,QAAAA,GAAAgK,MAAAC,EAAAjK,EAAAkI,WAAA,oBAAAvE,QAIAtE,QAAAW,QAAAA,GAAAgK,MAAAC,EAAAR,IAEAE,EAAAL,SAEA,mBAAAtJ,GAAAkI,WACA7I,QAAAW,QAAAA,GAAAgK,MAAAC,EAAAjK,EAAAkI,WAAA,mBAAAvE,QAGAyE,EACA/I,QAAAW,QAAAA,GAAAgK,MAAAC,EAAA7B,EAAA8B,QAAAP,EAAA3J,KAIAX,QAAAW,QAAAA,GAAAgK,MAAAC,EAAAP,OAKA,QAAAO,GAAAE,GACA,MAAA,4DAAApK,EAAAuB,MAAA6I,GAAA,WAGA,QAAAN,GAAA7J,GAEA,IAAA,GADAoK,GAAA/K,QAAAW,QAAAA,GAAAqK,SAAAC,WACAjC,EAAA,EAAAA,EAAA+B,EAAAnG,OAAAoE,IACA,GAAAhJ,QAAAW,QAAAoK,EAAA/B,IAAAkC,SAAA,qBACA,MAAAlL,SAAAW,QAAAoK,EAAA/B,GAGA,QAAA,EAIA,QAAAK,GAAA1I,GAGA,GAAAA,EAAAM,OAAAuI,GAAA,CAGA,GAAA2B,GAAA3B,EAAA7I,EAAAM,KAGAjB,SAAAW,QAAAA,GAAAyK,YAAA,aACApL,QAAAW,QAAAA,EAAA0K,YAAAD,YAAA,cAEAD,EAAAnB,QAAAtJ,EAAAC,EAAAe,KAAAT,OAAAP,EAAAC,EAAAe,KAAAT,MAAAwI,YACA0B,EAAAG,WACAtL,QAAAW,QAAAA,EAAA0K,YAAAE,SAAA,aAGAvL,QAAAW,QAAAA,GAAA4K,SAAA,eA5NA,GAAAC,GAAAxL,QAAAW,QAAAA,GAAA,GAEAoJ,KAGA0B,EAAAD,EAAA3C,WAAA,KAAAvE,MACAkF,EAAAtF,EAAAuH,GAAA/K,EAEA8I,GAAAC,WAAA,EAEA/I,EAAAyD,OAAA,WAAA,MAAAuH,QAAAC,KAAAnC,GAAA5E,QAAA,WAGA5E,QAAAwB,QAAAuI,EAAA,SAAAT,GAAAA,MACAR,EAAA0C,KAGA7K,EAAAwI,GAAA,SAAA,SAAAyC,GACAA,EAAAC,iBACAnL,EAAAoL,OAAA,WACAtC,EAAAC,WAAA,IAIAD,EAAAS,QACAvJ,EAAAoL,OAAA,WACApL,EAAAuB,MAAAuJ,EAAA3C,WAAA,4BAAAvE,WAIAkF,EAAAuC,MAAA,WAEA,IAAA,GAAA/C,GAAA,EAAAA,EAAAwC,EAAA5G,OAAAoE,IACAwC,EAAAxC,GAAA/H,OACAuI,EAAAgC,EAAAxC,GAAA/H,MAAA8C,cAAA,IACAyF,EAAAgC,EAAAxC,GAAA/H,MAAA+C,UAGAwF,GAAAC,WAAA,EACAD,EAAAwC,gBAGAlD,EAAA0C,WDsMAxL,QAAQC,OAAO,YAAYgM,KAAK,iBAAkB,SAAStE,GEtgB3DA,EAAAW,IAAA,YAAA,ihCACAX,EAAAW,IAAA,mBAAA,qJACAX,EAAAW,IAAA,oBAAA,IACAX,EAAAW,IAAA,eAAA,gSACAX,EAAAW,IAAA,mBAAA,mZACAX,EAAAW,IAAA,mBAAA,ggBACAX,EAAAW,IAAA,gBAAA,yUACAX,EAAAW,IAAA,iBAAA,oRACAX,EAAAW,IAAA,iBAAA,wEACAX,EAAAW,IAAA,eAAA,4fACAX,EAAAW,IAAA,mBAAA,kgBACAX,EAAAW,IAAA,eAAA","file":"uform.min.js","sourcesContent":["/*!\n * uform\n * https://github.com/yqfang/UForm#readme\n * yqfang,qianzhixiang\n * Version: 1.0.0 - 2016-07-09T15:14:13.564Z\n * License: ISC\n */\n\n\n(function() { \n\"use strict\";\nvar uf = angular.module('up.uform', ['ui.bootstrap']);\n\nuf.config([\"$provide\", \"datepickerConfig\", function ($provide, datepickerConfig) {\n    datepickerConfig.showWeeks = false;\n    $provide.decorator('ngModelDirective', [\"$delegate\", function ($delegate) {\n        var ngModel = $delegate[0], controller = ngModel.controller;\n        ngModel.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\n            var $interpolate = $injector.get('$interpolate');\n            attrs.$set('name', $interpolate(attrs.name || '')(scope));\n            attrs.$set('validator', $interpolate(attrs.validator || '')(scope));\n            $injector.invoke(controller, this, {\n                '$scope': scope,\n                '$element': element,\n                '$attrs': attrs\n            });\n        }];\n        return $delegate;\n    }]);\n\n    angular.forEach({ 'ng-form': 'ngFormDirective', 'form': 'formDirective' }, function (directive) {\n        $provide.decorator(directive, [\"$delegate\", function ($delegate) {\n            var form = $delegate[0], controller = form.controller;\n            form.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\n                var $interpolate = $injector.get('$interpolate');\n                attrs.$set('name', $interpolate(attrs.name || attrs.ngForm || '')(scope));\n                attrs.$set('angular-validator', \"\");\n                $injector.invoke(controller, this, {\n                    '$scope': scope,\n                    '$element': element,\n                    '$attrs': attrs\n                });\n            }];\n            return $delegate;\n        }]);\n    })\n}]);\n\n\n\n\nuf.directive('compileField', ['$compile', function ($compile) {\n    return {\n        restrict: 'A',\n        controller: [\"$scope\", function($scope) {\n            var vm = this;\n            this.field = $scope.$parent.$eval('field');\n            this.form = {};\n        }],\n        require: '?^uForm',\n        controllerAs: '$proxy',\n        scope: {},\n        link: function (scope, element, attrs, form) {\n            angular.extend(scope.$proxy.form, form);\n            element.html('<div ' + scope.$parent.$eval(attrs.compileField) + ' />');\n            $compile(element.contents())(scope);\n        }\n    };\n}])\n\nuf.directive(\"uForm\", [\"$rootScope\", function ($rootScope) {\n    return {\n        templateUrl: 'form.html',\n        transclude: true,\n        restrict: \"EA\",\n        controller: [\"$scope\", \"$attrs\", \"$rootScope\", \"ufield\", function ($scope, $attrs, $rootScope, ufield) {\n            var $parent = $scope.$parent;\n            this.fields = $parent.$eval($attrs.fields);\n            angular.forEach(this.fields, function(field) {\n                angular.extend(field, ufield.create(field));\n            })\n            this.option = $parent.$eval($attrs.option);\n            this.result = $parent.$eval($attrs.result) || $parent.$eval($attrs.result + \"={}\");\n        }],\n        scope: {},\n        controllerAs: \"uform\",\n        require: '?^uFormGroup',\n        link: function (scope, elem, attr, group) {\n            scope.uform.$form = scope.$parent.$eval(attr.name);\n            group && group.fields && group.fields.push(scope.uform.fields);\n            group && group.result && group.result.push(scope.uform.result);\n        }\n\n    }\n}]);\n\nuf.directive(\"uFormGroup\", function () {\n    return {\n        controller: [\"$scope\", \"$attrs\", function ($scope, $attrs) {\n            this.fields = $scope.$parent.$eval($attrs.fields) || $scope.$parent.$eval($attrs.fields + \"=[]\");;\n            this.result = $scope.$parent.$eval($attrs.result) || $scope.$parent.$eval($attrs.result + \"=[]\");;\n        }],\n        scope: {},\n        template: '<div ng-transclude></div>',\n        controllerAs: \"uFormGroup\",\n        transclude: true\n    }\n});\n\nuf\n  .directive('capitalize', function() {\n    return {\n      require: 'ngModel',\n      link: function(scope, element, attrs, modelCtrl) {\n        var capitalize = function(inputValue) {\n          if (inputValue == undefined) inputValue = '';\n          var capitalized = inputValue.toUpperCase();\n          if (capitalized !== inputValue) {\n            modelCtrl.$setViewValue(capitalized);\n            modelCtrl.$render();\n          }\n          return capitalized;\n        }\n        modelCtrl.$parsers.push(capitalize);\n        capitalize(scope[attrs.ngModel]); // capitalize initial value\n      }\n    };\n  });\n\nuf.directive(\"upFieldHide\", [\"$parse\", function ($parse) {\n    return {\n        require: \"?^uForm\",\n        restrict: 'A',\n        link: function (scope, element, attr, form) {\n            var exp;\n            if ('hide' in scope.field) {\n                scope.$watch(function () {\n                    var res = $parse(attr.upFieldHide)(form.result);\n                    return res;\n                }, function (value) {\n                    // hide the element\n                    element.css('display', value ? 'none' : '');\n                    // delete the hide element from resutl\n                    if (value) { delete form.result[scope.field.name]; }\n                })\n            }\n        }\n    }\n}])\n\nuf.directive(\"upMaxLength\", [\"$parse\", function ($parse) {\n    return {\n        require: 'ngModel',\n        restrict: 'A',\n        link: function (scope, ele,attr, model) {\n            model.$viewChangeListeners.push(function(){\n                var value = model.$viewValue;\n                value.length > attr['upMaxLength'] ? model.$setViewValue(value.substring(0,attr['upMaxLength'])) : null;\n                model.$render();\n            });\n        }\n    }\n}])\n\nangular.forEach({\n    upText: \"up-text\",\n    upDate: \"up-date\",\n    upTime: \"up-time\",\n    upDatetime: \"up-datetime\",\n    upPassword: \"up-password\",\n    upCheckbox: \"up-checkbox\",\n    upRadio: \"up-radio\",\n    upSubmit: \"up-submit\",\n    upSelect: \"up-select\",\n    upTextarea: \"up-textarea\",\n}, function (tpl, direct) {\n    uf.directive(direct, ['$compile', 'uFormUtil', function ($compile, uFormUtil) {\n        return {\n            restrict: 'EA',\n            controller: [\"$scope\", function ($scope) {\n                angular.extend(this, $scope.$proxy);\n            }],\n            controllerAs: 'vm',\n            link: function (scope, elem, attr) {\n                 uFormUtil.getTemplate(tpl).then(function(textTpl) {\n                        elem.html(textTpl.replace(/ng-model/g, uFormUtil.toAttrs(scope.vm.field.customs) + \"ng-model\"));\n                        $compile(elem.contents())(scope);\n                    })\n            }\n        }\n    }])\n});\n\n\n\n\nuf.provider('ufield', [function() {\n    var _tp = 'up-text'; // type\n    var _vo = 'dirty'; // validateOn\n    var _pt = /^.*$/; // defaut pattern\n    var _setOpts = function(opts){\n        var _opts = {};\n        opts = opts || {};\n        _opts.type = (angular.isDefined(opts.type)) ? opts.type : _tp; // type\n        _opts.validateOn = (angular.isDefined(opts.validateOn) && ((opts.validateOn === 'dirty') || (opts.validateOn === 'blur'))) ? opts.validateOn : _vo; // validate_on\n        _opts.pattern = (angular.isDefined(opts.pattern)) ? opts.pattern : _pt;\n        return _opts;\n    }; // end _setOpts\n    this.useType = function(val) {\n        if(angular.isDefined(val))\n        _tp = val;\n    }\n    this.useValidateOn = function(val) {\n        if(angular.isDefined(val))\n        _vo = val;\n    }\n    this.usePattern = function(val) {\n        if(angular.isDefined(val))\n        _pt = val;\n    }\n    this.$get = [function() {\n        return {\n            create : function (opts) {\n                opts = _setOpts(opts);\n                return opts;\n            }\n        }\n    }]\n}])\n\n// 把对象变为数组，并按照 id 排序\nuf.filter('orderById', function () {\n    return function (items, field, reverse) {\n        var filtered = [];\n        angular.forEach(items, function (item, name) {\n            item[\"name\"] = name;\n            filtered.push(item);\n        });\n        filtered.sort(function (a, b) {\n            return (a[field] > b[field] ? 1 : -1);\n        });\n        if (reverse) filtered.reverse();\n        return filtered;\n    };\n});\n\nuf.factory('uFormUtil', [\"$templateCache\", \"$q\", \"$http\", \"dialogs\", function($templateCache, $q, $http, dialogs) {\n    return {\n        toAttrs: toAttrs,\n        getTemplate: getTemplate\n    }\n    function toAttrs(obj) {\n        if(!obj) {\n            return \"\";\n        }\n        var str = \"\";\n        for(var o in obj) {\n            var next;\n            if(!obj[o]) {\n                next = o;\n            }else {\n                next = (o + '=' + obj[o])\n            }\n            str += (next + ' ')\n        }\n        return str;\n    }\n    function getTemplate (name) {\n        var tpath = name + '.html';\n        var tpl = $templateCache.get(tpath);\n        if(tpl) {\n            return $q.when(tpl);\n        }else {\n            return $http.get(tpath, {cache: true}).then(function(html) {\n                $templateCache.put(tpath, html);\n                return html.data;\n            }, function(response) {\n                dialogs.error(\"模板错误!\", \"通过：\" + tpath + \" 找不到模板\");\n            })\n        }\n    }\n}])\n\nuf.directive('angularValidator', ['$injector', '$parse',\n    function ($injector, $parse) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attrs, fn) {\n                // This is the DOM form element\n                var DOMForm = angular.element(element)[0];\n                // an array to store all the watches for form elements\n                var watches = [];\n                // This is the the scope form model\n                // All validation states are contained here\n                var form_name = DOMForm.attributes['name'].value;\n                var scopeForm = $parse(form_name)(scope);\n                // Set the default submitted state to false\n                scopeForm.submitted = false;\n                // Watch form length to add watches for new form elements\n                scope.$watch(function () { return Object.keys(scopeForm).length; }, function () {\n                    // Destroy all the watches\n                    // This is cleaner than figuring out which items are already being watched and only un-watching those.\n                    angular.forEach(watches, function (watch) { watch(); });\n                    setupWatches(DOMForm);\n                });\n                // Intercept and handle submit events of the form\n                element.on('submit', function (event) {\n                    event.preventDefault();\n                    scope.$apply(function () {\n                        scopeForm.submitted = true;\n                    });\n\n                    // If the form is valid then call the function that is declared in the angular-validator-submit attribute on the form element\n                    if (scopeForm.$valid) {\n                        scope.$apply(function () {\n                            scope.$eval(DOMForm.attributes[\"angular-validator-submit\"].value);\n                        });\n                    }\n                });\n                scopeForm.reset = function () {\n                    // Clear all the form values\n                    for (var i = 0; i < DOMForm.length; i++) {\n                        if (DOMForm[i].name) {\n                            scopeForm[DOMForm[i].name].$setViewValue(\"\");\n                            scopeForm[DOMForm[i].name].$render();\n                        }\n                    }\n                    scopeForm.submitted = false;\n                    scopeForm.$setPristine();\n                };\n                // Setup watches on all form fields\n                setupWatches(DOMForm);\n\n                //check if there is invalid message service for the entire form; if yes, return the injected service; if no, return false;\n                function hasFormInvalidMessage(formElement) {\n                    if (formElement && 'invalid-message' in formElement.attributes) {\n                        return $injector.get(formElement.attributes['invalid-message'].value);\n                    } else {\n                        return false;\n                    }\n                }\n                // Iterate through the form fields and setup watches on each one\n                function setupWatches(formElement) {\n                    var formInvalidMessage = hasFormInvalidMessage(formElement);\n                    for (var i = 0; i < formElement.length; i++) {\n                        // This ensures we are only watching form fields\n                        if (i in formElement) {\n                            setupWatch(formElement[i], formInvalidMessage);\n                        }\n                    }\n                }\n                // Setup $watch on a single formfield\n                function setupWatch(elementToWatch, formInvalidMessage) {\n                    // If element is set to validate on blur then update the element on blur\n                    if (\"validate-on\" in elementToWatch.attributes && elementToWatch.attributes[\"validate-on\"].value === \"blur\") {\n                        angular.element(elementToWatch).on('blur', function () {\n                            updateValidationMessage(elementToWatch, formInvalidMessage);\n                            updateValidationClass(elementToWatch);\n                        });\n                    }\n                    var watch = scope.$watch(function () {\n                        return elementToWatch.value + elementToWatch.required + scopeForm.submitted + checkElementValidity(elementToWatch) + getDirtyValue(scopeForm[elementToWatch.name]) + getValidValue(scopeForm[elementToWatch.name]);\n                    },\n                        function () {\n\n                            if (scopeForm.submitted) {\n                                updateValidationMessage(elementToWatch, formInvalidMessage);\n                                updateValidationClass(elementToWatch);\n                            }\n                            else {\n                                // Determine if the element in question is to be updated on blur\n                                var isDirtyElement = \"validate-on\" in elementToWatch.attributes && elementToWatch.attributes[\"validate-on\"].value === \"dirty\";\n\n                                if (isDirtyElement) {\n                                    updateValidationMessage(elementToWatch, formInvalidMessage);\n                                    updateValidationClass(elementToWatch);\n                                }\n                                // This will get called in the case of resetting the form. This only gets called for elements that update on blur and submit.\n                                else if (scopeForm[elementToWatch.name] && scopeForm[elementToWatch.name].$pristine) {\n                                    updateValidationMessage(elementToWatch, formInvalidMessage);\n                                    updateValidationClass(elementToWatch);\n                                }\n                            }\n\n                        });\n\n                    watches.push(watch);\n                }\n                // Returns the $dirty value of the element if it exists\n                function getDirtyValue(element) {\n                    if (element) {\n                        if (\"$dirty\" in element) {\n                            return element.$dirty;\n                        }\n                    }\n                }\n                function getValidValue(element) {\n                    if (element) {\n                        if (\"$valid\" in element) {\n                            return element.$valid;\n                        }\n                    }\n                }\n                function checkElementValidity(element) {\n                    // If element has a custom validation function\n                    if (\"validator\" in element.attributes) {\n                        // Call the custom validator function\n                        var isElementValid;\n                        if (!element.attributes.validator || element.attributes.validator.value === \"\") {\n                            isElementValid = true;\n                        }\n                        else {\n                            isElementValid = (scope.$eval(element.attributes.validator.value) == true);\n                        }\n\n                        if (scopeForm[element.name]) {\n                            scopeForm[element.name].$setValidity(\"angularValidator\", isElementValid);\n                            return isElementValid;\n                        }\n                        else {\n                            return true;\n                        }\n\n                    }\n                }\n                // Adds and removes an error message as a sibling element of the form field\n                // depending on the validity of the form field and the submitted state of the form.\n                // Will use default message if a custom message is not given\n                function updateValidationMessage(element, formInvalidMessage) {\n\n                    var defaultRequiredMessage = function () {\n                        return \"<i class='fa fa-times'></i> Required\";\n                    };\n                    var defaultInvalidMessage = function () {\n                        return \"<i class='fa fa-times'></i> Invalid\";\n                    };\n\n                    // Make sure the element is a form field and not a button for example\n                    // Only form elements should have names.\n                    if (!(element.name in scopeForm)) {\n                        return;\n                    }\n                    var scopeElementModel = scopeForm[element.name];\n\n                    // Remove all validation messages\n                    var validationMessageElement = isValidationMessagePresent(element);\n                    if (validationMessageElement) {\n                        validationMessageElement.remove();\n                    }\n                    // Only add validation messages if the form field is $dirty or the form has been submitted\n                    if (scopeElementModel.$dirty || (scope[element.form.name] && scope[element.form.name].submitted)) {\n\n                        if (scopeElementModel.$error.required) {\n                            // If there is a custom required message display it\n                            if (\"required-message\" in element.attributes) {\n                                angular.element(element).after(generateErrorMessage(element.attributes['required-message'].value));\n                            }\n                            // Display the default required message\n                            else {\n                                angular.element(element).after(generateErrorMessage(defaultRequiredMessage));\n                            }\n                        } else if (!scopeElementModel.$valid) {\n                            // If there is a custom validation message add it\n                            if (\"invalid-message\" in element.attributes) {\n                                angular.element(element).after(generateErrorMessage(element.attributes['invalid-message'].value));\n                            }\n                            // Display error message provided by custom service\n                            else if (formInvalidMessage) {\n                                angular.element(element).after(generateErrorMessage(formInvalidMessage.message(scopeElementModel, element)));\n                            }\n                            // Display the default error message\n                            else {\n                                angular.element(element).after(generateErrorMessage(defaultInvalidMessage));\n                            }\n                        }\n                    }\n                }\n                function generateErrorMessage(messageText) {\n                    return \"<label class='control-label has-error validationMessage'>\" + scope.$eval(messageText) + \"</label>\";\n                }\n                // Returns the validation message element or False\n                function isValidationMessagePresent(element) {\n                    var elementSiblings = angular.element(element).parent().children();\n                    for (var i = 0; i < elementSiblings.length; i++) {\n                        if (angular.element(elementSiblings[i]).hasClass(\"validationMessage\")) {\n                            return angular.element(elementSiblings[i]);\n                        }\n                    }\n                    return false;\n                }\n                // Adds and removes .has-error class to both the form element and the form element's parent\n                // depending on the validity of the element and the submitted state of the form\n                function updateValidationClass(element) {\n                    // Make sure the element is a form field and not a button for example\n                    // Only form fields should have names.\n                    if (!(element.name in scopeForm)) {\n                        return;\n                    }\n                    var formField = scopeForm[element.name];\n                    // This is extra for users wishing to implement the .has-error class on the field itself\n                    // instead of on the parent element. Note that Bootstrap requires the .has-error class to be on the parent element\n                    angular.element(element).removeClass('has-error');\n                    angular.element(element.parentNode).removeClass('has-error');\n                    // Only add/remove validation classes if the field is $dirty or the form has been submitted\n                    if (formField.$dirty || (scope[element.form.name] && scope[element.form.name].submitted)) {\n                        if (formField.$invalid) {\n                            angular.element(element.parentNode).addClass('has-error');\n                            // This is extra for users wishing to implement the .has-error class on the field itself\n                            // instead of on the parent element. Note that Bootstrap requires the .has-error class to be on the parent element\n                            angular.element(element).addClass('has-error');\n                        }\n                    }\n                }\n            }\n        };\n    }]);\n\n}());\nangular.module('up.uform').run(['$templateCache', function($templateCache) {$templateCache.put('form.html','<div><style type=text/css>\\n\\t\\t.form-inline .inline-control {\\n\\t\\t\\tdisplay: inline-block;\\n\\t\\t}\\n\\t\\t.form-inline .datepicker {\\n\\t\\t\\twidth: 120px;\\n\\t\\t}\\n\\t\\t.form-inline input[type=\\'text\\'] {\\n\\t\\t\\twidth: 120px;\\n\\t\\t}\\n\\t\\t.form-inline .form-group {\\n\\t\\t    display: inline-block;\\n\\t\\t    margin-bottom: 0;\\n\\t\\t    vertical-align: middle;\\n\\t\\t    margin-right: 10px;\\n\\t\\t}\\n\\t\\t.form-horizontal .control-label {\\n\\t\\t\\ttext-align: right;\\n\\t\\t}\\n\\t\\t.control-datepicker {\\n\\t\\t\\tpadding-left: 0;\\n\\t\\t}\\n\\t\\t.timepicker tr.text-center {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\t</style><div class=form-group up-field-hide={{field.hide}} ng-class=field.name ng-repeat=\"field in (uform.fields | orderById: \\'id\\')\"><label for={{field.name}} ng-class=uform.option.labelClass class=control-label><span ng-show=\"field.required && field.label\">*</span> <span ng-if=\"field.type!=\\'up-checkbox\\'\">{{ field.label }}</span></label><div compile-field=field.type ng-class=uform.option.inputClass></div></div><div ng-transclude=\"\"></div></div>');\n$templateCache.put('up-checkbox.html','<div class=checkbox><label><input type=checkbox name={{vm.field.name}} ng-model=vm.form.result[vm.field.name]> {{ vm.field.label }}</label></div>');\n$templateCache.put('up-checklist.html','');\n$templateCache.put('up-date.html','<div><input type=text name={{vm.field.name}} class=\"form-control datepicker\" datepicker-popup=yyyy-MM-dd ng-model=vm.form.result[vm.field.name] ng-init=\"vm.form.open=false\" is-open=vm.form.open ng-style=vm.field.style show-button-bar=false ng-click=\"vm.form.open=!vm.form.open\"></div>');\n$templateCache.put('up-datetime.html','<div><div class=\"col-xs-6 control-datepicker\"><input type=text name={{vm.field.name}} class=\"form-control datepicker\" datepicker-popup=yyyy-MM-dd ng-model=vm.form.result[vm.field.name] ng-init=\"vm.form.open=false\" is-open=vm.form.open show-button-bar=false ng-click=\"vm.form.open=!vm.form.open\"></div><div><div class=timepicker timepicker=\"\" ng-model=vm.form.result[vm.field.name]></div></div></div>');\n$templateCache.put('up-password.html','<input type=password id={{vm.field.name}} name={{vm.field.name}} ng-model=vm.form.result[vm.field.name] ng-required=vm.field.required required-message=\"\\'{{vm.field.requiredMsg}}\\'\" ng-maxlength={{vm.field.maxlength}} ng-minlength={{vm.field.minlength}} ng-pattern=vm.field.pattern validate-on={{vm.field.validateOn}} validator={{vm.field.validator}} invalid-message={{vm.field.validator}} class=form-control ng-disabled=vm.field.disabled ng-attr-placeholder={{vm.field.placeholder}} ng-style=vm.field.style>');\n$templateCache.put('up-radio.html','<div><div class=radio-inline ng-repeat=\"candidate in vm.field.candidates\"><label><input type=radio ng-init=\"vm.form.result[vm.field.name]=vm.field.candidates[0].value\" ng-model=vm.form.result[vm.field.name] name={{vm.field.name}} value={{candidate.value}} ng-required=vm.field.required>{{candidate.label}}</label></div></div>');\n$templateCache.put('up-select.html','<select ng-init=\"vm.form.result[vm.field.name]=vm.field.candidates[0].value\" class=form-control ng-model=vm.form.result[vm.field.name] name={{vm.field.name}} ng-options=\"option.value as option.name for option in vm.field.candidates\" ng-required=vm.field.required></select>');\n$templateCache.put('up-submit.html','<input class=\"btn btn-primary\" type=submit value={{vm.field.value}}>');\n$templateCache.put('up-text.html','<input type=text id={{vm.field.name}} name={{vm.field.name}} ng-model=vm.form.result[vm.field.name] ng-required=vm.field.required required-message=\"\\'{{vm.field.requiredMsg}}\\'\" ng-maxlength={{vm.field.maxlength}} ng-minlength={{vm.field.minlength}} ng-pattern=vm.field.pattern validate-on={{vm.field.validateOn}} validator={{vm.field.validator}} invalid-message={{vm.field.validator}} class=form-control ng-disabled=vm.field.disabled ng-attr-placeholder={{vm.field.placeholder}} ng-style=vm.field.style>');\n$templateCache.put('up-textarea.html','<textarea id={{vm.field.name}} name={{vm.field.name}} ng-model=vm.form.result[vm.field.name] ng-required=vm.field.required required-message=\"\\'{{vm.field.requiredMsg}}\\'\" ng-maxlength={{vm.field.maxlength}} ng-minlength={{vm.field.minlength}} ng-pattern=vm.field.pattern validate-on={{vm.field.validateOn}} validator={{vm.field.validator}} invalid-message={{vm.field.validator}} class=form-control ng-disabled=vm.field.disabled ng-attr-placeholder={{vm.field.placeholder}} ng-style=vm.field.style>\\n</textarea>');\n$templateCache.put('up-time.html','<div><div class=timepicker timepicker=\"\" ng-model=vm.form.result[vm.field.name]></div></div>');}]);",null,null],"sourceRoot":"/source/"}