{"version":3,"sources":["uform_without_templates.js","templates.js"],"names":["uf","angular","module","config","$provide","decorator","$delegate","ngModel","controller","scope","element","attrs","$injector","$interpolate","get","$set","name","validator","invoke","this","$scope","$element","$attrs","forEach","ng-form","form","directive","ngForm","$parse","restrict","link","fn","hasFormInvalidMessage","formElement","attributes","value","setupWatches","formInvalidMessage","i","length","setupWatch","elementToWatch","on","updateValidationMessage","updateValidationClass","watch","$watch","required","scopeForm","submitted","checkElementValidity","getDirtyValue","getValidValue","isDirtyElement","$pristine","watches","push","$dirty","$valid","isElementValid","$eval","$setValidity","defaultRequiredMessage","defaultInvalidMessage","scopeElementModel","validationMessageElement","isValidationMessagePresent","remove","$error","after","generateErrorMessage","message","messageText","elementSiblings","parent","children","hasClass","formField","removeClass","parentNode","$invalid","addClass","DOMForm","form_name","Object","keys","event","preventDefault","$apply","reset","$setViewValue","$render","$setPristine","$compile","listener","bindDirectiveCompile","html","toString","compileScope","bindDirectiveScope","contents","input-text","input-date","input-time","input-datetime","input-password","input-checkbox","input-radio","input-submit","select","textarea","directiveSelector","tpl","directiveScope","$parent","field","ref","controllerAs","templateUrl","model","replace","require","elem","attr","ctrl","filter","items","reverse","filtered","item","sort","a","b","uform","res","upFieldHide","result","css","$rootScope","transclude","fields","option","ctrls","uFormGroup","template","run","$templateCache","put"],"mappings":"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","file":"uform.min.js","sourcesContent":["/*!\n * uform\n * https://github.com/yqfang/UForm#readme\n * Version: 1.0.0 - 2016-07-02T18:33:38.405Z\n * License: ISC\n */\n\n\n(function() { \n\"user strict\";\nvar uf = angular.module('up.uform', ['ui.bootstrap', 'ng.shims.placeholder', 'ngLocale', 'ui.select'])\n\n\nuf.config([\"$provide\", function ($provide) {\n    $provide.decorator('ngModelDirective', [\"$delegate\", function ($delegate) {\n        var ngModel = $delegate[0], controller = ngModel.controller;\n        ngModel.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\n            var $interpolate = $injector.get('$interpolate');\n            attrs.$set('name', $interpolate(attrs.name || '')(scope));\n            attrs.$set('validator', $interpolate(attrs.validator || '')(scope));\n            $injector.invoke(controller, this, {\n                '$scope': scope,\n                '$element': element,\n                '$attrs': attrs\n            });\n        }];\n        return $delegate;\n    }]);\n\n    angular.forEach({ 'ng-form': 'ngFormDirective', 'form': 'formDirective' }, function (directive) {\n        $provide.decorator(directive, [\"$delegate\", function ($delegate) {\n            var form = $delegate[0], controller = form.controller;\n            form.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\n                var $interpolate = $injector.get('$interpolate');\n                attrs.$set('name', $interpolate(attrs.name || attrs.ngForm || '')(scope));\n                attrs.$set('angular-validator', \"\");\n                $injector.invoke(controller, this, {\n                    '$scope': scope,\n                    '$element': element,\n                    '$attrs': attrs\n                });\n            }];\n            return $delegate;\n        }]);\n    })\n}]);\n\n\n\n\nuf.directive('angularValidator', ['$injector', '$parse',\n    function ($injector, $parse) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attrs, fn) {\n                // This is the DOM form element\n                var DOMForm = angular.element(element)[0];\n                // an array to store all the watches for form elements\n                var watches = [];\n                // This is the the scope form model\n                // All validation states are contained here\n                var form_name = DOMForm.attributes['name'].value;\n                var scopeForm = $parse(form_name)(scope);\n                // Set the default submitted state to false\n                scopeForm.submitted = false;\n                // Watch form length to add watches for new form elements\n                scope.$watch(function () { return Object.keys(scopeForm).length; }, function () {\n                    // Destroy all the watches\n                    // This is cleaner than figuring out which items are already being watched and only un-watching those.\n                    angular.forEach(watches, function (watch) { watch(); });\n                    setupWatches(DOMForm);\n                });\n                // Intercept and handle submit events of the form\n                element.on('submit', function (event) {\n                    event.preventDefault();\n                    scope.$apply(function () {\n                        scopeForm.submitted = true;\n                    });\n\n                    // If the form is valid then call the function that is declared in the angular-validator-submit attribute on the form element\n                    if (scopeForm.$valid) {\n                        scope.$apply(function () {\n                            scope.$eval(DOMForm.attributes[\"angular-validator-submit\"].value);\n                        });\n                    }\n                });\n                scopeForm.reset = function () {\n                    // Clear all the form values\n                    for (var i = 0; i < DOMForm.length; i++) {\n                        if (DOMForm[i].name) {\n                            scopeForm[DOMForm[i].name].$setViewValue(\"\");\n                            scopeForm[DOMForm[i].name].$render();\n                        }\n                    }\n                    scopeForm.submitted = false;\n                    scopeForm.$setPristine();\n                };\n                // Setup watches on all form fields\n                setupWatches(DOMForm);\n\n                //check if there is invalid message service for the entire form; if yes, return the injected service; if no, return false;\n                function hasFormInvalidMessage(formElement) {\n                    if (formElement && 'invalid-message' in formElement.attributes) {\n                        return $injector.get(formElement.attributes['invalid-message'].value);\n                    } else {\n                        return false;\n                    }\n                }\n                // Iterate through the form fields and setup watches on each one\n                function setupWatches(formElement) {\n                    var formInvalidMessage = hasFormInvalidMessage(formElement);\n                    for (var i = 0; i < formElement.length; i++) {\n                        // This ensures we are only watching form fields\n                        if (i in formElement) {\n                            setupWatch(formElement[i], formInvalidMessage);\n                        }\n                    }\n                }\n                // Setup $watch on a single formfield\n                function setupWatch(elementToWatch, formInvalidMessage) {\n                    if (!(\"validate-on\" in elementToWatch.attributes) || elementToWatch.attributes[\"validate-on\"].value === \"\") {\n                        elementToWatch.attributes[\"validate-on\"] = {\n                            value: 'dirty'\n                        }\n                    }\n                    // If element is set to validate on blur then update the element on blur\n                    if (\"validate-on\" in elementToWatch.attributes && elementToWatch.attributes[\"validate-on\"].value === \"blur\") {\n                        angular.element(elementToWatch).on('blur', function () {\n                            updateValidationMessage(elementToWatch, formInvalidMessage);\n                            updateValidationClass(elementToWatch);\n                        });\n                    }\n                    var watch = scope.$watch(function () {\n                        return elementToWatch.value + elementToWatch.required + scopeForm.submitted + checkElementValidity(elementToWatch) + getDirtyValue(scopeForm[elementToWatch.name]) + getValidValue(scopeForm[elementToWatch.name]);\n                    },\n                        function () {\n\n                            if (scopeForm.submitted) {\n                                updateValidationMessage(elementToWatch, formInvalidMessage);\n                                updateValidationClass(elementToWatch);\n                            }\n                            else {\n                                // Determine if the element in question is to be updated on blur\n                                var isDirtyElement = \"validate-on\" in elementToWatch.attributes && elementToWatch.attributes[\"validate-on\"].value === \"dirty\";\n\n                                if (isDirtyElement) {\n                                    updateValidationMessage(elementToWatch, formInvalidMessage);\n                                    updateValidationClass(elementToWatch);\n                                }\n                                // This will get called in the case of resetting the form. This only gets called for elements that update on blur and submit.\n                                else if (scopeForm[elementToWatch.name] && scopeForm[elementToWatch.name].$pristine) {\n                                    updateValidationMessage(elementToWatch, formInvalidMessage);\n                                    updateValidationClass(elementToWatch);\n                                }\n                            }\n\n                        });\n\n                    watches.push(watch);\n                }\n                // Returns the $dirty value of the element if it exists\n                function getDirtyValue(element) {\n                    if (element) {\n                        if (\"$dirty\" in element) {\n                            return element.$dirty;\n                        }\n                    }\n                }\n                function getValidValue(element) {\n                    if (element) {\n                        if (\"$valid\" in element) {\n                            return element.$valid;\n                        }\n                    }\n                }\n                function checkElementValidity(element) {\n                    // If element has a custom validation function\n                    if (\"validator\" in element.attributes) {\n                        // Call the custom validator function\n                        var isElementValid;\n                        if (!element.attributes.validator || element.attributes.validator.value === \"\") {\n                            isElementValid = true;\n                        }\n                        else {\n                            isElementValid = scope.$eval(element.attributes.validator.value += ' === true');\n                        }\n\n                        if (scopeForm[element.name]) {\n                            scopeForm[element.name].$setValidity(\"angularValidator\", isElementValid);\n                            return isElementValid;\n                        }\n                        else {\n                            return true;\n                        }\n\n                    }\n                }\n                // Adds and removes an error message as a sibling element of the form field\n                // depending on the validity of the form field and the submitted state of the form.\n                // Will use default message if a custom message is not given\n                function updateValidationMessage(element, formInvalidMessage) {\n\n                    var defaultRequiredMessage = function () {\n                        return \"<i class='fa fa-times'></i> Required\";\n                    };\n                    var defaultInvalidMessage = function () {\n                        return \"<i class='fa fa-times'></i> Invalid\";\n                    };\n\n                    // Make sure the element is a form field and not a button for example\n                    // Only form elements should have names.\n                    if (!(element.name in scopeForm)) {\n                        return;\n                    }\n                    var scopeElementModel = scopeForm[element.name];\n\n                    // Remove all validation messages\n                    var validationMessageElement = isValidationMessagePresent(element);\n                    if (validationMessageElement) {\n                        validationMessageElement.remove();\n                    }\n                    // Only add validation messages if the form field is $dirty or the form has been submitted\n                    if (scopeElementModel.$dirty || (scope[element.form.name] && scope[element.form.name].submitted)) {\n\n                        if (scopeElementModel.$error.required) {\n                            // If there is a custom required message display it\n                            if (\"required-message\" in element.attributes) {\n                                angular.element(element).after(generateErrorMessage(element.attributes['required-message'].value));\n                            }\n                            // Display the default required message\n                            else {\n                                angular.element(element).after(generateErrorMessage(defaultRequiredMessage));\n                            }\n                        } else if (!scopeElementModel.$valid) {\n                            // If there is a custom validation message add it\n                            if (\"invalid-message\" in element.attributes) {\n                                angular.element(element).after(generateErrorMessage(element.attributes['invalid-message'].value));\n                            }\n                            // Display error message provided by custom service\n                            else if (formInvalidMessage) {\n                                angular.element(element).after(generateErrorMessage(formInvalidMessage.message(scopeElementModel, element)));\n                            }\n                            // Display the default error message\n                            else {\n                                angular.element(element).after(generateErrorMessage(defaultInvalidMessage));\n                            }\n                        }\n                    }\n                }\n                function generateErrorMessage(messageText) {\n                    return \"<label class='control-label has-error validationMessage'>\" + scope.$eval(messageText) + \"</label>\";\n                }\n                // Returns the validation message element or False\n                function isValidationMessagePresent(element) {\n                    var elementSiblings = angular.element(element).parent().children();\n                    for (var i = 0; i < elementSiblings.length; i++) {\n                        if (angular.element(elementSiblings[i]).hasClass(\"validationMessage\")) {\n                            return angular.element(elementSiblings[i]);\n                        }\n                    }\n                    return false;\n                }\n                // Adds and removes .has-error class to both the form element and the form element's parent\n                // depending on the validity of the element and the submitted state of the form\n                function updateValidationClass(element) {\n                    // Make sure the element is a form field and not a button for example\n                    // Only form fields should have names.\n                    if (!(element.name in scopeForm)) {\n                        return;\n                    }\n                    var formField = scopeForm[element.name];\n                    // This is extra for users wishing to implement the .has-error class on the field itself\n                    // instead of on the parent element. Note that Bootstrap requires the .has-error class to be on the parent element\n                    angular.element(element).removeClass('has-error');\n                    angular.element(element.parentNode).removeClass('has-error');\n                    // Only add/remove validation classes if the field is $dirty or the form has been submitted\n                    if (formField.$dirty || (scope[element.form.name] && scope[element.form.name].submitted)) {\n                        if (formField.$invalid) {\n                            angular.element(element.parentNode).addClass('has-error');\n                            // This is extra for users wishing to implement the .has-error class on the field itself\n                            // instead of on the parent element. Note that Bootstrap requires the .has-error class to be on the parent element\n                            angular.element(element).addClass('has-error');\n                        }\n                    }\n                }\n            }\n        };\n    }]);\n\nuf.directive('bindDirectiveCompile', ['$compile', function ($compile) {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs) {\n            var listener = scope.$watch(function () {\n                return scope.$eval(attrs.bindDirectiveCompile);\n            }, function (value) {\n                value = '<div ' + value + ' />'\n                element.html(value && value.toString());\n                // If scope is provided use it, otherwise use parent scope\n                var compileScope = scope;\n                if (attrs.bindDirectiveScope) {\n                    compileScope = scope.$eval(attrs.bindDirectiveScope);\n                }\n                $compile(element.contents())(compileScope);\n                listener(); //you don't need to watch the directive once it is compiled\n            });\n        }\n    };\n}])\n\nangular.forEach({\n    'input-text': 'appInputTextComponent',\n    'input-date': 'appInputDateComponent',\n    'input-time': 'appInputTimeComponent',\n    'input-datetime': 'appInputDatetimeComponent',\n    'input-password': 'appInputPasswordComponent',\n    'input-checkbox': 'appInputCheckboxComponent',\n    'input-radio': 'appInputRadioComponent',\n    'input-submit': 'appInputSubmitComponent',\n    'select': 'appSelectComponent',\n    'textarea': 'appTextareaComponent'\n}, function (directiveSelector, tpl) {\n    uf.directive(directiveSelector, function () {\n        return {\n            restrict: 'EA',\n            controller: [\"$scope\", \"$attrs\", function ($scope, $attrs) {\n                var directiveScope = $scope.$parent;\n                this.field = directiveScope.$eval('field');\n                this.ref = $scope;\n            }],\n            controllerAs: 'componentCtrl',\n            templateUrl: tpl + '.html',\n            scope: { \"model\": '=' },\n            replace: true,\n            require: ['?^uForm'],\n            link: function (scope, elem, attr, ctrl) {\n            }\n        }\n    })\n});\n\n\n\n\n// 把对象变为数组，并按照 id 排序\nuf.filter('orderById', function () {\n    return function (items, field, reverse) {\n        var filtered = [];\n        angular.forEach(items, function (item, name) {\n            item[\"name\"] = name;\n            filtered.push(item);\n        });\n        filtered.sort(function (a, b) {\n            return (a[field] > b[field] ? 1 : -1);\n        });\n        if (reverse) filtered.reverse();\n        return filtered;\n    };\n});\n\nuf.directive(\"upFieldHide\", [\"$parse\", function ($parse) {\n    return {\n        require: \"?^uForm\",\n        restrict: 'A',\n        link: function (scope, element, attr, uform) {\n            var exp;\n            if ('hide' in scope.field) {\n                scope.$watch(function () {\n                    var res = $parse(attr.upFieldHide)(uform.result);\n                    return res;\n                }, function (value) {\n                    // hide the element\n                    element.css('display', value ? 'none' : '');\n                    // delete the hide element from resutl\n                    if (value) { delete uform.result[scope.field.name]; }\n                })\n            }\n        }\n    }\n}])\n\nuf.directive(\"uForm\", [\"$rootScope\", function ($rootScope) {\n    return {\n        templateUrl: 'form.html',\n        transclude: true,\n        restrict: \"EA\",\n        controller: [\"$scope\", \"$attrs\", \"$rootScope\", function ($scope, $attrs, $rootScope) {\n            var $parent = $scope.$parent;\n            this.fields = $parent.$eval($attrs.fields);\n            this.option = $parent.$eval($attrs.option);\n            this.result = $parent.$eval($attrs.result) || $parent.$eval($attrs.result + \"={}\");\n            this.ref = $scope;\n        }],\n        scope: {},\n        controllerAs: \"form\",\n        require: ['?^uFormGroup'],\n        link: function (scope, elem, attr, ctrls) {\n            var uFormGroup = ctrls[0];\n            uFormGroup && uFormGroup.fields && uFormGroup.fields.push(scope.form.fields);\n            uFormGroup && uFormGroup.result && uFormGroup.result.push(scope.form.result);\n        }\n\n    }\n}]);\n\nuf.directive(\"uFormGroup\", function () {\n    return {\n        controller: [\"$scope\", \"$attrs\", function ($scope, $attrs) {\n            this.fields = $scope.$parent.$eval($attrs.fields) || $scope.$parent.$eval($attrs.fields + \"=[]\");;\n            this.result = $scope.$parent.$eval($attrs.result) || $scope.$parent.$eval($attrs.result + \"=[]\");;\n        }],\n        scope: {},\n        template: '<div ng-transclude></div>',\n        controllerAs: \"uFormGroup\",\n        transclude: true\n    }\n});\n\n}());","/*!\n * uform\n * https://github.com/yqfang/UForm#readme\n * Version: 1.0.0 - 2016-07-02T18:33:38.405Z\n * License: ISC\n */\n\n\nangular.module('up.uform').run(['$templateCache', function($templateCache) {$templateCache.put('form.html','<div><style type=text/css>\\n\\t\\t.form-inline .inline-control {\\n\\t\\t\\tdisplay: inline-block;\\n\\t\\t}\\n\\t\\t.form-inline .datepicker {\\n\\t\\t\\twidth: 120px;\\n\\t\\t}\\n\\t\\t.form-inline input[type=\\'text\\'] {\\n\\t\\t\\twidth: 120px;\\n\\t\\t}\\n\\t\\t.form-inline .form-group {\\n\\t\\t    display: inline-block;\\n\\t\\t    margin-bottom: 0;\\n\\t\\t    vertical-align: middle;\\n\\t\\t    margin-right: 10px;\\n\\t\\t}\\n\\t\\t.form-horizontal .control-label {\\n\\t\\t\\ttext-align: right;\\n\\t\\t}\\n\\t\\t.control-datepicker {\\n\\t\\t\\tpadding-left: 0;\\n\\t\\t}\\n\\t\\t.timepicker tr.text-center {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\t</style><div class=form-group up-field-hide={{field.hide}} ng-class=field.name ng-repeat=\"field in form.fields | orderById: \\'id\\'\"><label for={{field.name}} ng-class=form.option.labelClass class=control-label><span ng-show=\"field.required && field.label\">*</span> <span ng-if=\"field.type!=\\'input:checkbox\\'\">{{ field.label }}</span></label><div ng-switch=field.type ng-class=form.option.inputClass><div ng-switch-when=input app-input-text-component=\"\" model=form.result[field.name]></div><div ng-switch-when=input:date app-input-date-component=\"\" model=form.result[field.name]></div><div ng-switch-when=input:time app-input-time-component=\"\" model=form.result[field.name]></div><div ng-switch-when=input:datetime app-input-datetime-component=\"\" model=form.result[field.name]></div><div ng-switch-when=input:password app-input-password-component=\"\" model=form.result[field.name]></div><div ng-switch-when=input:checkbox app-input-checkbox-component=\"\" model=form.result[field.name]></div><div ng-switch-when=input:radio app-input-radio-component=\"\" model=form.result[field.name]></div><div ng-switch-when=input:submit app-input-submit-component=\"\" model=form.result[field.name]></div><div ng-switch-when=textarea app-textarea-component=\"\" model=form.result[field.name]></div><div ng-switch-when=select app-select-component=\"\" model=form.result[field.name]></div><div ng-switch-default=\"\" bind-directive-compile=field.type></div></div></div><div ng-transclude=\"\"></div></div>');\n$templateCache.put('input-checkbox.html','<div class=checkbox><label><input type=checkbox name={{componentCtrl.field.name}} ng-model=componentCtrl.ref.model> {{ componentCtrl.field.label }}</label></div>');\n$templateCache.put('input-date.html','<div><input type=text name={{componentCtrl.field.name}} class=\"form-control datepicker\" datepicker-popup=yyyy-MM-dd ng-model=componentCtrl.ref.model ng-init=\"componentCtrl.ref.open=false\" is-open=componentCtrl.ref.open ng-style=componentCtrl.field.style show-button-bar=false ng-click=\"componentCtrl.ref.open=!componentCtrl.ref.open\"></div>');\n$templateCache.put('input-datetime.html','<div><div class=\"col-xs-6 control-datepicker\"><input type=text name={{componentCtrl.field.name}} class=\"form-control datepicker\" datepicker-popup=yyyy-MM-dd ng-model=componentCtrl.ref.model ng-init=\"componentCtrl.ref.open=false\" is-open=componentCtrl.ref.open show-button-bar=false ng-click=\"componentCtrl.ref.open=!componentCtrl.ref.open\"></div><div><div class=timepicker timepicker=\"\" ng-model=componentCtrl.ref.model></div></div></div>');\n$templateCache.put('input-password.html','<input type=password id={{componentCtrl.field.name}} name={{componentCtrl.field.name}} ng-model=componentCtrl.ref.model ng-required=componentCtrl.field.required required-message=\"\\'{{componentCtrl.field.requiredMsg}}\\'\" ng-maxlength={{componentCtrl.field.maxlength}} ng-minlength={{componentCtrl.field.minlength}} ng-pattern={{componentCtrl.field.pattern}} validate-on={{componentCtrl.field.validateOn}} validator={{componentCtrl.field.validator}} invalid-message={{componentCtrl.field.validator}} class=form-control ng-disabled=componentCtrl.field.disabled ng-attr-placeholder={{componentCtrl.field.placeholder}} ng-style=componentCtrl.field.style>');\n$templateCache.put('input-radio.html','<div><div class=radio-inline ng-repeat=\"candidate in componentCtrl.field.candidates\"><label><input type=radio ng-init=\"componentCtrl.ref.model=componentCtrl.field.candidates[0].value\" ng-model=componentCtrl.ref.model name={{componentCtrl.field.name}} value={{candidate.value}} ng-required=componentCtrl.field.required>{{candidate.label}}</label></div></div>');\n$templateCache.put('input-submit.html','<input class=\"btn btn-primary\" type=submit value={{componentCtrl.field.value}}>');\n$templateCache.put('input-text.html','<input type=text id={{componentCtrl.field.name}} name={{componentCtrl.field.name}} ng-model=componentCtrl.ref.model ng-required=componentCtrl.field.required required-message=\"\\'{{componentCtrl.field.requiredMsg}}\\'\" ng-maxlength={{componentCtrl.field.maxlength}} ng-minlength={{componentCtrl.field.minlength}} ng-pattern={{componentCtrl.field.pattern}} validate-on={{componentCtrl.field.validateOn}} validator={{componentCtrl.field.validator}} invalid-message={{componentCtrl.field.validator}} class=form-control ng-disabled=componentCtrl.field.disabled ng-attr-placeholder={{componentCtrl.field.placeholder}} ng-style=componentCtrl.field.style>');\n$templateCache.put('input-time.html','<div><div class=timepicker timepicker=\"\" ng-model=componentCtrl.ref.model></div></div>');\n$templateCache.put('select.html','<select ng-init=\"componentCtrl.ref.model=componentCtrl.field.candidates[0].value\" class=form-control ng-model=componentCtrl.ref.model name={{componentCtrl.field.name}} ng-options=\"option.value as option.name for option in componentCtrl.field.candidates\" ng-required=componentCtrl.field.required></select>');\n$templateCache.put('textarea.html','<textarea id={{componentCtrl.field.name}} name={{componentCtrl.field.name}} ng-model=componentCtrl.ref.model ng-required=componentCtrl.field.required required-message=\"\\'{{componentCtrl.field.requiredMsg}}\\'\" ng-maxlength={{componentCtrl.field.maxlength}} ng-minlength={{componentCtrl.field.minlength}} ng-pattern={{componentCtrl.field.pattern}} validate-on={{componentCtrl.field.validateOn}} validator={{componentCtrl.field.validator}} invalid-message={{componentCtrl.field.validator}} class=form-control ng-disabled=componentCtrl.field.disabled ng-attr-placeholder={{componentCtrl.field.placeholder}} ng-style=componentCtrl.field.style>\\n</textarea>');}]);"],"sourceRoot":"/source/"}